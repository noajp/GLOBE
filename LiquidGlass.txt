
iOS 26 Liquid Glass：公式コンポーネントとソースコードに関する包括的開発者ガイド


第1章：AppleエコシステムにおけるLiquid Glassのパラダイムシフト

iOS 26の登場により、Appleは過去10年で最も重要なデザイン言語の刷新を発表しました。これは単なる表面的な変更ではなく、Appleのプラットフォーム全体にわたるユーザーインターフェース（UI）とユーザーエクスペリエンス（UX）の哲学における根本的な進化を示すものです。この変革の中核をなすのが「Liquid Glass」と呼ばれる新しいデザイン言語です 1。

1.1. 序論：新たな「デジタルメタマテリアル」

Liquid Glassは、iOS 7で導入されたフラットデザイン以来、Appleが初めて採用する真に統一されたクロスプラットフォームのデザイン言語です。iOS 26、iPadOS 26、macOS 26 Tahoe、watchOS 26、tvOS 26といった、Appleの主要なオペレーティングシステムすべてに一貫して適用されます 1。
Appleは公式に、Liquid Glassを「ガラスの光学的特性と流動性を組み合わせた」動的な「マテリアル」であると定義しています 2。さらに、WWDC25のセッションでは「光を動的に曲げ、形作るデジタルメタマテリアル」として紹介されました 6。この表現は、Liquid Glassが単なるスタイルやテーマではなく、物理的な特性を持つかのように振る舞う、より高度な概念であることを示唆しています。UI要素が固有の物理的挙動（屈折、反射、柔軟性など）を持つという考え方は、開発者がより直感的で物理法則に根差したインタラクションを設計することを促します。これは、単純なアニメーション（フェードイン/アウトなど）を超え、UIが質量や弾性を持つかのような、新しいインタラクションデザインの時代の到来を告げるものです。
このデザイン言語は、純粋なフラットデザインからの意図的な脱却を意味し、より表現豊かで、奥行きを重視した、ある種スキューモーフィックな要素を取り入れています 2。

1.2. 概念的および歴史的背景

Liquid Glassは突如として現れたものではなく、Appleが長年にわたり培ってきたデザイン哲学の集大成です。その起源は、以下の要素に遡ることができます 2。
Mac OS XのAquaデザイン言語：光沢や影を用いたスキューモーフィズムと、リアルな質感の表現。
iOS 7のリアルタイムガウシアンブラー：UI要素の背後にあるコンテンツをぼかすことで、階層と奥行きを生み出す半透明効果。
iPhone Xの流体的なモーション：ジェスチャーベースの操作によって実現された、滑らかで物理的なUIの動き。
Dynamic Islandの柔軟性：状況に応じて形や大きさを変える、動的で適応性の高いUI要素。
visionOSの没入型インターフェース：ガラスを基調としたマテリアルと、空間的な奥行き感を重視したUIデザイン。
これらの過去の資産から学び、物理世界の素材を単に再現するのではなく、デジタルならではの特性を持つ「メタマテリアル」としてLiquid Glassは設計されました 6。

1.3. 物理的および光学的コア特性

開発者向けセッションやドキュメントで詳述されているLiquid Glassの挙動を定義する主要な特性は以下の通りです。
レンズ効果と屈折（Lensing & Refraction）：Liquid Glassの最も特徴的な視覚的要素です。従来の単純なブラーとは異なり、背後にあるコンテンツからの光を能動的に曲げ、集光させることで、不透明な背景を使わずにUI要素の輪郭と奥行きを定義します 4。これにより、コントロール要素は非常に軽量かつ透明でありながら、視覚的に明確に認識できます。
流体的なモーションとインタラクション（Fluid Motion & Interaction）：このマテリアルは「生きている」かのように感じられるよう設計されています。ユーザーのタッチに反応して柔軟に変形し、光で活性化することで、満足度の高い応答性を実現します 6。例えば、ボタンはメニューに滑らかに変形し、スライダーのつまみは操作中にLiquid Glassのマテリアルへと変化します 5。
動的な適応性（Dynamic Adaptivity）：Liquid Glassは静的なマテリアルではありません。背後のコンテンツ、周囲の環境光（カラフルなコンテンツからの光の漏れ込み）、そして要素自体のサイズに応じて、色合い、影、ダイナミックレンジを常に調整し、可読性を確保します 2。これにより、いかなる状況でもコントラストと使いやすさが維持されます。
これらの高度な視覚効果は、相応の計算能力を要求します。Appleは公式に、Liquid GlassのリアルタイムレンダリングにはApple Siliconが提供する「追加の計算能力が必要である」と明言しています 2。これは単なる技術的な注記以上の意味を持ちます。最新かつ最高のソフトウェア体験が、最新のハードウェアと視覚的・機能的に直結されることを示しており、これはAppleのビジネス戦略と深く結びついています。ユーザーにハードウェアのアップグレードを促し、ハードウェアとソフトウェアを統合したエコシステムの価値を強化すると同時に、自社で完全なスタックを制御していない競合他社に対する明確な差別化要因となります。開発者にとっては、特にiPhone 11のような最低サポート対象デバイスでのパフォーマンス最適化が、これまで以上に重要な課題となることを意味します 1。

第2章：コアデザイン哲学とヒューマンインターフェースガイドライン（HIG）

この章では、Liquid Glassの抽象的な概念を、開発者やデザイナーが実践できる具体的な設計原則へと落とし込みます。これらの原則は、Appleが更新したヒューマンインターフェースガイドライン（HIG）に基づいています。

2.1. 3つの柱：階層、調和、一貫性

Appleの新しいHIGは、Liquid Glassを用いた設計において3つの基本原則を強調しています 11。
階層（Hierarchy）：Liquid Glassは、明確な視覚的階層を確立するために使用されます。このマテリアルは主に、ツールバー、タブバー、ボタンなどが含まれる「コントロールレイヤー」に適用され、その下の「コンテンツレイヤー」から浮き上がって見えます 2。この分離により、ユーザーはコンテンツそのものに集中しやすくなります。
調和（Harmony）：ハードウェアの物理的なデザインとの調和が重視されます。Liquid Glassの丸みを帯びた浮遊する形状は、近年のAppleデバイスの曲線的な角と調和するように設計されており、ソフトウェアとハードウェアの一体感を生み出します 6。
一貫性（Consistency）：ユーザーがアプリやデバイス間を移動する際に一貫した体験を維持するため、プラットフォームの慣習に従うことが求められます 11。これには、可能な限り標準コンポーネントを使用することが含まれます。

2.2. 実装と使用に関するベストプラクティス

Liquid Glassの導入に伴い、HIGは以前よりも規範的な指針を提示しており、開発者を標準コンポーネントの使用へと強く誘導しています。これは、プラットフォーム全体で高品質かつ一貫したユーザー体験を確保し、大多数の開発者が新しいデザイン言語を容易に採用できるようにするための戦略的な判断です。
コントロールレイヤー vs. コンテンツレイヤー：最も厳格なルールは、「コンテンツレイヤーでLiquid Glassを使用しない」ことです 7。その理由は、視覚的な階層が乱れ、ユーザーの注意をコンテンツから逸らしてしまうためです 12。唯一の例外は、スライダーのつまみのように、インタラクション中に一時的にマテリアルが適用される一時的な要素です 12。
限定的かつ思慮深い使用：HIGは「Liquid Glassエフェクトを控えめに使用する」ことを繰り返し強調しています 5。カスタムコントロールでの過度な使用は、ユーザー体験を損なう可能性があります。目的はコンテンツを引き立てることであり、UIで圧倒することではありません。
視覚的な乱雑さの回避：「ガラスの上にガラスを重ねない」「すべてを色付けしない」といった具体的な禁止事項も示されています 7。これらの慣行は、インターフェースを乱雑で分かりにくくするため避けるべきです。
マテリアルのバリエーション：Liquid Glassには「Regular」と「Clear」の2つのバリエーションがあります。「Clear」は、メディアリッチなコンテンツの上に表示され、ディミングレイヤーの追加が許容でき、かつ前面のコンテンツが太字で明るい場合にのみ使用されるべきです 12。

2.3. アプリアイコンへの新しいアプローチ：Icon Composer

Liquid Glassのデザイン言語はアプリアイコンにも及び、新しい制作手法が導入されました 9。
多層構造：アイコンは、新しい専用ツールであるIcon Composerを使用して、最大4つのレイヤーで構成されるようになりました 4。
動的効果：システムはこれらのレイヤーを利用して、デバイスの動きに反応する鏡面ハイライトなどの動的効果を生成します。これにより、あたかも物理的なガラスオブジェクトから光が反射しているかのような効果が生まれます 14。
デザインガイダンス：アイコンは、シンプルで太い、半透明の形状を重ね合わせて構成し、マスキングやエフェクトの適用はシステムに任せることが推奨されます 5。
ユーザーカスタマイズ：ユーザーは、アイコンの外観をライト、ダーク、クリア、または色付きのティントにカスタマイズできるようになりました 1。

2.4. 設計段階からのアクセシビリティ

Liquid Glassは、アクセシビリティを設計の中核に据えています。システムは、ユーザーのアクセシビリティ設定に応じてLiquid Glassのエフェクトを自動的に調整し、すべてのユーザーに包括的な体験を提供します 7。
自動調整：「透明度を下げる」や「視差効果を減らす」といった設定を有効にすると、半透明効果や流体的なアニメーションが変更または無効化されます 5。
開発者の責任：開発者は、これらの設定を有効にした状態でアプリをテストし、カスタム要素が適切なフォールバック体験を提供することを確認する責任があります 5。
その他の考慮事項：透明な要素を使用する際には、十分なテキストコントラストを確保することが重要です。また、VoiceOverの互換性のために、アイコンにはテキストラベルを併記することが推奨されます 18。

第3章：システム全体への適用と標準コンポーネントの採用

この章では、開発者がXcode 26 SDKでアプリをビルドするだけで「無償で」得られる恩恵、すなわちシステムUIと標準コンポーネントへのLiquid Glassの自動的な適用について詳述します。

3.1. 刷新されたシステムエクスペリエンス

Liquid Glassは、個々のアプリだけでなく、iOS 26のシステム全体の外観と操作感を根本的に変革します。
ロック画面：壁紙の写真の被写体を常に表示し続けるように、時刻表示が動的にサイズと位置を調整する、新しいアダプティブな時刻表示が導入されました 17。また、デバイスを動かすと写真の壁紙に命が吹き込まれるような、新しい3D空間エフェクトも追加されています 17。
ホーム画面：アプリアイコンは、前述の多層構造によって刷新され、ユーザーはライト、ダーク、ティント、クリアといった外観にカスタマイズできます 1。
コントロールセンター、通知、メニュー：これらのシステム要素はすべてLiquid Glassマテリアルを使用し、周囲の環境に反応する、浮遊する半透明のバブルとして表示されます 2。

3.2. 標準UIコンポーネントへの自動更新

開発者が移行作業の労力を見積もる上で、この点は非常に重要です。iOS 26 SDKでアプリをリコンパイルするだけで、ほとんどの標準的な、カスタマイズされていないUIコンポーネントには、自動的にLiquid Glassのスタイルが適用されます 5。
コントロール：ボタン、スライダー、トグル、スイッチなどのコントロールは自動的に刷新されます。インタラクション中に「生き生きと」振る舞い、例えばスライダーのつまみはドラッグ中にLiquid Glassへと変化します 5。
ナビゲーション要素：UITabBarやUINavigationBar、サイドバー、ツールバーといった主要なナビゲーションコンポーネントは、デフォルトで浮遊するLiquid Glassマテリアルを使用するようになります 2。
動的な挙動：Safariなどのアプリで見られるように、ユーザーのスクロールに応じてタブバーが縮小・拡大するといった動的な挙動も、標準で提供されます 1。
アラートとモーダル：インプレースアラートや、角がより丸くなったリサイズ可能なモーダルビューなど、表示要素も新しいデザインに更新されます 9。
この「リコンパイルによる恩恵」は、新しいUIの迅速かつ広範な採用を促すためのAppleの戦略的な決定です。リコンパイルするだけでアプリが即座にモダンでネイティブな外観になるため、開発者にはアプリを更新する強い動機が生まれます。これにより、アプリエコシステム全体が新しいパラダイムへ迅速に移行し、ユーザーにとっての一貫した体験が保証されます。しかし、これは同時に新たな課題も生み出します。これまで標準コンポーネントにカスタムの背景や外観を適用していた開発者は、新しいシステムマテリアルとの視覚的な競合を避けるため、それらのカスタムコードを見直し、おそらくは削除する必要に迫られます 5。

第4章：SwiftUIにおけるLiquid Glassの実装：宣言的アプローチ

この章では、モダンなSwiftUIファーストの開発におけるLiquid Glassの実装について、技術的な詳細を掘り下げます。SwiftUIの宣言的な性質は、Liquid Glassの複雑な状態遷移やアニメーションを管理するのに非常に適しており、AppleがこのフレームワークをLiquid Glassの「第一級市民」として位置付けていることが、そのAPIの洗練度から見て取れます。

4.1. コアAPI：glassEffectビューモディファイア

glassEffect(_:in:)は、カスタムSwiftUIビューにLiquid Glassを適用するための主要なツールです 4。
基本的な使用法は以下の通りです。

Swift


Text("Hello")
   .glassEffect(.regular, in: Capsule())


このモディファイアは、いくつかのプロパティでカスタマイズ可能です。
マテリアルのバリエーション：.regularまたは.clearを指定します 12。
形状（Shape）：Capsule()、Circle()、RoundedRectangle(cornerRadius: 25)など、エフェクトの境界となる形状を定義します 4。
ティント（Tint）：.tint()モディファイアと組み合わせることで、目立たせたい要素に色を付けることができます 4。
インタラクティビティ：interactive(_:)モディファイアを追加することで、カスタムコンポーネントがタッチに反応し、標準ボタンと同じ流体的なハイライト効果を持つようになります 4。

4.2. パフォーマンスとアニメーション：GlassEffectContainer

GlassEffectContainerは、パフォーマンスの最適化と高度なアニメーションを実現するために不可欠なコンポーネントです 4。
このコンテナは、複数のglassEffectを持つビューを内包することで、それらの形状をブレンドさせたり、トランジション中に互いにモーフィングさせたりすることを可能にし、同時にレンダリングを効率化します 4。特に重要なのが
spacingパラメータで、これは隣接するガラス形状が融合し始める距離を制御し、Liquid Glass特有の「液体のような」モーフィング効果を生み出します 4。

4.3. 高度なテクニック

ジオメトリの統合：glassEffectUnion(id:namespace:)モディファイアは、複数の独立したビューを、単一の統一されたLiquid Glass形状にまとめるために使用します。これは、動的に生成されるビューや、単純なレイアウトコンテナの外にあるビューを扱う際に特に有用です 4。
シームレスなトランジション：matchedGeometryEffectをLiquid Glassエフェクトと組み合わせることで、ビュー階層の変更時に、ある形状が別の形状へと滑らかに変化する、洗練されたトランジションを作成できます 24。
背景拡張エフェクト：backgroundExtensionEffect()モディファイアは、画像などのコンテンツがサイドバーやインスペクタの下に回り込んでブラーがかかる、エッジ・トゥ・エッジの体験を実現するために使用されます 5。

4.4. 「Landmarks」サンプルアプリの分解

Appleの公式サンプルアプリ「Landmarks」は、これらのAPIを実践的に学ぶための最良の教材です 14。
カスタムバッジ：「Landmarks」では、glassEffect(_:in:)を用いてカスタムのLiquid Glassバッジを作成し、GlassEffectContainerを使ってそれらのアニメーションを協調させています 4。
背景拡張：ランドマークの詳細ビューでは、backgroundExtensionEffect()が効果的に使用され、没入感のあるUIを実現しています 4。
ツールバーの調整：ツールバー内のアイテムを論理的なグループにまとめることで、システムが提供するガラス効果をより洗練させています 4。
SwiftUIに提供されているAPIの深さと洗練度は、Appleが将来のUI開発の方向性としてSwiftUIを強く推進していることを示しています。特にGlassEffectContainerのような、ビュー間の関係性を管理するための専用コンテナの存在は、命令的なUIKitの世界観とは一線を画すものであり、Liquid Glassの最も表現力豊かな実装はSwiftUIでこそ可能になることを物語っています。

第5章：UIKitおよびAppKitにおけるLiquid Glassの採用

この章では、UIKitやAppKitで構築された既存の大規模なコードベースを維持している開発者向けに、実践的なガイドを提供します。これらのフレームワーク向けのAPIは、主に既存のアプリを新しいデザインに「採用」させ、互換性を確保することに焦点を当てており、SwiftUIのようなゼロから新しいインタラクションを「創造」するためのツールとは性格が異なります。

5.1. 既存コードベースへの適用戦略

Liquid Glassへの移行は、段階的に進めることが推奨されます。
Xcode 26でのビルド：最初のステップとして、常にアプリをXcode 26でビルドし、自動的に適用される変更点を確認します 5。
カスタム外観の監査と削除：次に、ナビゲーションバーやタブバーなどに適用されているカスタムの背景や外観を特定し、新しいシステム提供のLiquid Glassマテリアルと競合するものを削除します。これが最も重要な作業となります 5。

5.2. 主要なUIKit API

UIBackgroundExtensionView：この新しいUIViewサブクラスは、サイドバーの背後でコンテンツをミラーリングし、ブラーをかけることでエッジ・トゥ・エッジの背景拡張効果を実現するUIKit版のAPIです 5。
新しいボタンスタイル：UIButton.Configurationに、.glass、.prominentGlass、.clearGlassといった新しいスタイルが追加され、カスタム描画なしで簡単にガラスの外観を採用できるようになりました 5。
タブバーの挙動：UITabBarControllerの新しいtabBarMinimizeBehaviorプロパティを設定することで、スクロールに応じたタブバーの自動的な最小化を有効にできます 5。
コーナー設定：UICornerConfiguration APIは、カスタムビューをシステムの新しい同心円状の角丸に合わせるのに役立ちます 5。

5.3. 主要なAppKit API（macOS向け）

NSSplitViewController：sidebarやinspectorのビヘイビアを持つNSSplitViewItemを使用することが、適切な浮遊型またはエッジ・トゥ・エッジのガラスマテリアルを自動的に適用させる標準的な方法です 26。
NSToolbarItemのプロパティ：
isBordered (Bool)：falseに設定することで、アイテムの背景にあるガラスを削除できます 26。
styleとbackgroundTintColor：これらを使用して、目立たせたいアイテムにティント付きのガラス効果を適用します 26。
NSBackgroundExtensionView：UIKitのUIBackgroundExtensionViewに相当するAppKitのクラスで、ブラーのかかった拡張背景効果を作成します 5。
NSView.LayoutRegion：ウィンドウの新しい大きな角丸を考慮したレイアウトガイドを提供するAPIで、コンテンツがクリッピングされるのを防ぎます 26。
prefersCompactControlSizeMetrics：高密度のUIのために、以前のmacOSリリースと互換性のあるコントロールサイズに戻すためのNSViewのプロパティです 26。
これらのAPIは、既存のアプリがiOS 26やmacOS Tahoe上でネイティブに見え、正しく動作するための明確で効率的な道筋を提供します。その目的は採用と互換性の確保であり、Liquid Glassマテリアル自体を使った斬新なインタラクションの開拓は、SwiftUIに委ねられています。

第6章：開発者向けツールと公式リソース

この章では、開発者がLiquid Glassの導入を始めるにあたり必要となる不可欠なツールと、Appleが提供する公式の学習リソースをまとめて紹介します。

6.1. 必須ツール

Xcode 26：iOS 26 SDKを用いてビルドするために必須となる統合開発環境（IDE）です 4。
Icon Composer：Liquid Glassの体験を最大限に引き出すために必要な、多層構造のアプリアイコンを作成するための新しい専用ツールです 4。

6.2. 主要なWWDC25ビデオセッションの概要

Liquid Glassを理解するために特に重要なWWDC25のセッションを以下に要約します。
"Meet Liquid Glass" (WWDC25/219)：Liquid Glassのデザインと哲学の基礎を解説するセッションです。Dynamics（力学）、Adaptivity（適応性）、Lensing（レンズ効果）といった基本原則に焦点を当てています 6。
"Build a SwiftUI app with the new design"：SwiftUI開発者向けの主要な技術セッションで、「Landmarks」サンプルアプリを題材に、コアAPIの実践的な使い方を紹介しています 16。
"Build a UIKit app with the new design" (WWDC25/284)：UIKit開発者にとって不可欠なガイドです。タブビュー、スプリットビュー、バー、コントロールへの変更点について詳しく解説しています 30。
"Build an AppKit app with the new design" (WWDC25/310)：macOS開発者向けのセッションで、ウィンドウ、ツールバーの変更点や、AppKit固有の新しいAPIについて詳述しています 26。

6.3. 公式ドキュメントとサンプルコードの活用

開発者は、以下の公式ドキュメントとサンプルコードを参照することで、より深い理解を得ることができます。
公式ドキュメント：
"Liquid Glass" Technology Overview：すべての情報の起点となるメインポータルページです 16。
"Adopting Liquid Glass"：すべてのフレームワークに共通する、高レベルの採用ガイドです 5。
"Applying Liquid Glass to custom views"：SwiftUIに特化したAPIの詳細なドキュメントです 24。
"Landmarks" サンプルプロジェクト：Liquid Glassの標準的な実装例として最も重要なリソースです。ダウンロードしてコードを実際に動かし、その構造を分析することが強く推奨されます 14。

第7章：包括的APIおよびコンポーネントリファレンス

このセクションでは、本レポートの中核となる価値を提供する、フレームワーク横断のAPIリファレンスを提供します。この表は、開発者が特定の機能を実現するための実装パスを迅速に比較検討できるように設計されており、日々の開発作業における実用的なツールとして機能します。

7.1. Liquid Glass APIリファレンステーブル

機能・概念
SwiftUI実装
UIKit実装
AppKit実装
説明と主要パラメータ
ガラスマテリアルの適用
glassEffect(_:in:) (モディファイア)
UIButton.Configuration (新しいスタイル、例：.glass)
NSButton.BezelStyle.glass
コアとなるLiquid Glassマテリアルを適用します。バリエーション (.regular, .clear)、形状、ティント、インタラクティビティをパラメータで指定します。
ガラスのアニメーション/モーフィング
GlassEffectContainer (ビュー)
N/A (手動でのアニメーション実装が必要)
N/A (手動でのアニメーション実装が必要)
レンダリングを最適化し、子ビュー間の流体的なモーフィングアニメーションを可能にするコンテナです。
ガラス形状の統合
glassEffectUnion(id:namespace:) (モディファイア)
N/A
N/A
複数のビューを単一の統一されたガラス形状に結合します。
背景拡張エフェクト
backgroundExtensionEffect() (モディファイア)
UIBackgroundExtensionView (クラス)
NSBackgroundExtensionView (クラス)
サイドバーのような浮遊要素の背後でコンテンツを拡張・ブラー処理し、エッジ・トゥ・エッジの見た目を実現します。
ツールバーのガラス制御
N/A (システムデフォルト)
N/A (システムデフォルト)
NSToolbarItem.isBordered (プロパティ)
ツールバーアイテムからガラスの背景をプログラムで削除できます。
ティント付きツールバーアイテム
ティント付きボタンを含む .toolbar(content:)
N/A (システムデフォルト)
NSToolbarItem.style =.prominent
ツールバーアイテムに目立つティント付きのガラス効果を適用します。
タブバーの最小化
.tabBarMinimizeBehavior(...) (モディファイア)
tabBarMinimizeBehavior (プロパティ)
N/A
スクロール時のタブバーの自動的な縮小・拡大を有効にします。
コーナーセーフなレイアウト
N/A (システムデフォルト)
N/A (システムデフォルト)
NSView.LayoutRegion (API)
新しい大きなウィンドウの角丸を避けるためのレイアウトガイドを提供します。
コンパクトなコントロール
N/A
N/A
prefersCompactControlSizeMetrics (プロパティ)
高密度のレイアウトのために、以前のOSバージョンと互換性のあるコントロールサイズを使用するオプトインです。


第8章：採用に向けた戦略的提言

最後の章では、技術的な実装からプロジェクトの計画と実行へと視点を移し、開発チームに向けた高レベルの戦略的なアドバイスを提供します。

8.1. 移行の監査と計画

既存のアプリケーションを監査するためのチェックリストを以下に示します。
ナビゲーションバー、タブバー、ツールバーに適用されているすべてのカスタム背景を特定する。
新しいデザインとの一貫性がなくなる、すべてのカスタム描画されたコントロールを洗い出す。
画面の角の近くに重要な情報を配置しているレイアウトを見直す。
段階的な採用戦略を推奨します。
フェーズ1（互換性確保）：Xcode 26でリコンパイルし、競合するカスタム外観を削除し、レイアウトの問題を修正します。目標は、ネイティブで正しく表示されることです。
フェーズ2（機能強化）：主要なヒーロー画像に背景拡張エフェクトを使用したり、カスタムコントロールを新しいガラスAPIで更新するなど、価値の高い部分から新機能の採用を開始します。
フェーズ3（革新）：SwiftUIベースのアプリでは、GlassEffectContainerやモーフィングアニメーションを活用して、斬新で魅力的なインタラクションの創出を探求します。

8.2. パフォーマンスの重要性

Liquid Glassが高い計算コストを要求することを再度強調します 2。具体的な最適化のアドバイスは以下の通りです。
SwiftUIで、近接してアニメーションする可能性のある複数のガラスエフェクトがある場合は、必ずGlassEffectContainerを使用します 24。
画面上に同時に表示するカスタムガラスエフェクトの数を制限します 5。
特に最も古いサポート対象ハードウェア（例：iPhone 11）でアプリを徹底的にプロファイリングし、パフォーマンスの低下やフレーム落ちがないかを確認します。